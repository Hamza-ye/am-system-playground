package org.nmcpye.activitiesmanagement.extended.schemamodule;

import java.util.List;

public interface SchemaService {
    void register(SchemaDescriptor descriptor);

    /**
     * Get schema which has been generated by a SchemaDescriptor.
     *
     * @param klass Class to get for
     * @return Schema for class, or null
     * @see org.nmcpye.activitiesmanagement.extended.schemamodule.SchemaDescriptor
     */
    Schema getSchema(Class<?> klass);

    /**
     * Get schema if it has been described by a SchemaDescriptor, if not, it
     * will generate a Schema dynamically from the class. Only the properties
     * part of the Schema will be usable (together with parts which can be
     * auto-generated like isIdentifiableObject).
     *
     * @param klass Class to get for
     * @return Schema for class, or null
     * @see org.nmcpye.activitiesmanagement.extended.schemamodule.SchemaDescriptor
     */
    Schema getDynamicSchema(Class<?> klass);

    /**
     * Get schema which has been generated by a SchemaDescriptor by singular
     * name.
     *
     * @param name Name to get Schema for, will be matched against
     *             Schema.getSingular().
     * @return Schema for class, or null
     * @see org.nmcpye.activitiesmanagement.extended.schemamodule.SchemaDescriptor
     */
    Schema getSchemaBySingularName(String name);

    /**
     * Get schema which has been generated by a SchemaDescriptor by singular
     * name.
     *
     * @param name Name to get Schema for, will be matched against
     *             Schema.getSingular().
     * @return Schema for class, or null
     * @see org.nmcpye.activitiesmanagement.extended.schemamodule.SchemaDescriptor
     */
    Schema getSchemaByPluralName(String name);

    /**
     * Get all available schemas (which are generated with a schema descriptor).
     *
     * @return List of all available schemas
     */
    List<Schema> getSchemas();

    /**
     * Get all available schemas (which are generated with a schema descriptor).
     *
     * @return List of all available schemas
     */
    List<Schema> getSortedSchemas();

    /**
     * Get all available schemas which have the metadata property set to true.
     *
     * @return List of all available metadata schemas
     */
    List<Schema> getMetadataSchemas();

//    /**
//     * Collect all authorities from schema descriptors.
//     *
//     * @return a set of authorities.
//     */
//    Set<String> collectAuthorities();

    Class<?> getConcreteClass(Class<?> klass);
}
